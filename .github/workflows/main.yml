# =============================================================
# KubeHealth Dashboard - Workflow de GitHub Actions
# =============================================================
# Este workflow automatiza la recolección de datos de Kubernetes y PagerDuty
# Se ejecuta cada 30 minutos y puede ser disparado manualmente

name: 🚀 KubeHealth Dashboard - Data Collection

on:
  # Trigger automático cada 30 minutos
  schedule:
    - cron: '*/30 * * * *'
  
  # Trigger manual desde la interfaz web o API
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Ejecutar en modo debug (más logs)'
        required: false
        default: false
        type: boolean

  # Trigger en push a main (opcional, para testing)
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/**'

# Variables de entorno globales
env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # =============================================================
  # JOB 1: ANÁLISIS DE DATOS (Backend Python)
  # =============================================================
  data-collection:
    name: 📊 Recopilar Datos de Kubernetes y PagerDuty
    runs-on: ubuntu-latest
    
    outputs:
      status-file: ${{ steps.generate-data.outputs.status-file }}
      execution-time: ${{ steps.generate-data.outputs.execution-time }}
    
    steps:
      # Checkout del código
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Setup Python
      - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Instalar dependencias Python
      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      # Login a Azure CLI
      - name: 🔐 Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Verificar conexión Azure
      - name: ✅ Verify Azure Connection
        run: |
          az account show
          az aks list --output table | head -10

      # Ejecutar análisis principal
      - name: 🔍 Execute Data Collection
        id: generate-data
        env:
          AZURE_USER: ${{ secrets.AZURE_USER }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
          PAGERDUTY_API_TOKEN: ${{ secrets.PAGERDUTY_API_TOKEN }}
          PAGERDUTY_SERVICE_ID: ${{ secrets.PAGERDUTY_SERVICE_ID }}
          DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        run: |
          echo "🚀 Iniciando análisis de datos..."
          cd backend
          
          # Ejecutar el script principal
          if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
            python main.py --debug
          else
            python main.py
          fi
          
          # Verificar que se generó el archivo de salida
          if [ -f "../frontend/status.json" ]; then
            echo "✅ Archivo status.json generado correctamente"
            echo "status-file=success" >> $GITHUB_OUTPUT
            echo "execution-time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          else
            echo "❌ Error: No se generó el archivo status.json"
            exit 1
          fi

      # Validar JSON generado
      - name: 🔍 Validate Generated JSON
        run: |
          echo "🔍 Validando estructura del JSON..."
          python -c "
          import json
          with open('frontend/status.json', 'r') as f:
              data = json.load(f)
              print(f'✅ JSON válido - Clusters: {data.get(\"summary\", {}).get(\"total_clusters\", 0)}')
              print(f'✅ Namespaces monitoreados: {data.get(\"summary\", {}).get(\"total_namespaces_monitored\", 0)}')
              print(f'✅ Estado general: {data.get(\"overall_status\", \"N/A\")}')
          "

      # Subir status.json como artefacto
      - name: 📤 Upload Status Data
        uses: actions/upload-artifact@v4
        with:
          name: kubehealth-status-${{ steps.generate-data.outputs.execution-time }}
          path: frontend/status.json
          retention-days: 30

      # Mostrar resumen de ejecución
      - name: 📋 Execution Summary
        run: |
          echo "## 📊 Resumen de Ejecución" >> $GITHUB_STEP_SUMMARY
          echo "- **Fecha:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Estado:** ✅ Completado exitosamente" >> $GITHUB_STEP_SUMMARY
          echo "- **Archivo generado:** frontend/status.json" >> $GITHUB_STEP_SUMMARY

  # =============================================================
  # JOB 2: ACTUALIZAR FRONTEND (GitHub Pages)
  # =============================================================
  deploy-frontend:
    name: 🌐 Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    needs: data-collection
    if: always() && needs.data-collection.outputs.status-file == 'success'
    
    # Permisos necesarios para GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # Entorno para deployment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # Checkout del código
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Setup Node.js para compilar CSS
      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Instalar dependencias y compilar CSS
      - name: 🎨 Build Frontend Assets
        run: |
          cd frontend
          npm ci
          npm run build
          echo "✅ CSS compilado correctamente"

      # Descargar el archivo status.json del job anterior
      - name: 📥 Download Status Data
        uses: actions/download-artifact@v4
        with:
          name: kubehealth-status-${{ needs.data-collection.outputs.execution-time }}
          path: frontend/

      # Configurar GitHub Pages
      - name: 🔧 Setup GitHub Pages
        uses: actions/configure-pages@v4

      # Subir artefactos para Pages
      - name: 📤 Upload GitHub Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/

      # Deploy a GitHub Pages
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Resumen del deployment
      - name: 🌐 Deployment Summary
        run: |
          echo "## 🌐 Frontend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Estado:** ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Datos actualizados:** ${{ needs.data-collection.outputs.execution-time }}" >> $GITHUB_STEP_SUMMARY

  # =============================================================
  # JOB 3: NOTIFICACIONES (Opcional)
  # =============================================================
  notifications:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [data-collection, deploy-frontend]
    if: always() && (failure() || success())
    
    steps:
      - name: 📧 Notify on Success
        if: needs.data-collection.result == 'success' && needs.deploy-frontend.result == 'success'
        run: |
          echo "✅ KubeHealth Dashboard actualizado exitosamente"
          echo "📊 Datos recopilados: ${{ needs.data-collection.outputs.execution-time }}"
          # Aquí se pueden agregar notificaciones a Slack, Teams, etc.

      - name: 🚨 Notify on Failure
        if: failure()
        run: |
          echo "❌ Error en KubeHealth Dashboard workflow"
          echo "🔍 Revisar logs para más detalles"
          # Aquí se pueden agregar notificaciones de error